<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kubernetes on Aurora</title>
    <link>http://vite.work/tags/kubernetes/</link>
    <description>Recent content in kubernetes on Aurora</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>苏ICP备18050258号</copyright>
    <lastBuildDate>Fri, 05 Jun 2020 22:35:45 +0800</lastBuildDate>
    
	<atom:link href="http://vite.work/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes_problem</title>
      <link>http://vite.work/post/kubernetes_problem/</link>
      <pubDate>Fri, 05 Jun 2020 22:35:45 +0800</pubDate>
      
      <guid>http://vite.work/post/kubernetes_problem/</guid>
      <description>K8S故障排除方法 1.查看pods哪些是有问题的，Runningg正常，其他异常； /opt/kubernetes/bin/kubectl get pods --all-namespaces -owide NAMESPACE NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE default nginx-dbddb74b8-d78cd 1/1 Running 0 17m 172.17.90.3 192.168.18.148 &amp;lt;none&amp;gt; 2.查看异常pod的详情 /opt/kubernetes/bin/kubectl describe pods nginx-dbddb74b8-2hthr 我这边异常信息如下：
Warning FailedScheduling 32m (x2 over 32m) default-scheduler 0/2 nodes are available: 2 node(s) had taints that the pod didn&#39;t tolerate.
解决办法：参考：https://github.com/kubernetes-sigs/kubespray/issues/2798
3.查看异常服务的详情 /opt/kubernetes/bin/kubectl describe services nginx 4.查看集群node的状态 /opt/kubernetes/bin/kubectl get nodes -o wide NAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME 192.</description>
    </item>
    
    <item>
      <title>Docker Desktop Kubernetes</title>
      <link>http://vite.work/post/docker-desktop-kubernetes/</link>
      <pubDate>Fri, 05 Jun 2020 15:31:54 +0800</pubDate>
      
      <guid>http://vite.work/post/docker-desktop-kubernetes/</guid>
      <description>windows10 docker-desktop安装kuberetes:v1.15.5  对应版本    首先创建一个镜像对应表文件 images.properties：
k8s.gcr.io/pause:3.1=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/kube-controller-manager:v1.15.5=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.15.5 k8s.gcr.io/kube-scheduler:v1.15.5=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.15.5 k8s.gcr.io/kube-proxy:v1.15.5=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.15.5 k8s.gcr.io/kube-apiserver:v1.15.5=registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.15.5 k8s.gcr.io/etcd:3.3.10=registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.3.10 k8s.gcr.io/coredns:1.3.1=registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.3.1 k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1=registry.cn-hangzhou.aliyuncs.com/google_containers/kubernetes-dashboard-amd64:v1.10.1   然后在相同目录下，创建脚本 docker-images-k8s.ps1：
  foreach($line in Get-Content .\images.properties) { $data = $line.Split(&#39;=&#39;) $key = $data[0]; $value = $data[1]; Write-Output &amp;quot;$key=$value&amp;quot; docker pull ${value} docker tag ${value} ${key} docker rmi ${value} }   执行上面的脚本
  启用kubeernetes功能
   启用dashboard  $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml 部署成功后，启动 Kubernetes API Server 访问代理。</description>
    </item>
    
  </channel>
</rss>